c
params
c
params[:pc].each do |k,v| p k end
params[:pc].each do |pc| p pc end
params[:pc].each do |pc|
params
c
params
c
params
c
params
c
params
c
params
c
params
c
n
get_ratio_sum(sclass)
sclass
n
params
c
sclass
n
sclass
n
c
params[:point_component][:content]
params[:point_component]
params
sclass
sclass.point_components.build(content: params[:point_component][:content])
n
sclass.point_components.build
sclass
n
c
params
c
params
c
6.times do |i| p i end
6.times do |i|
xlsx.row(1).length
xlsx.row(1)[0]
xlsx.first_row
xlsx.cell(1,2)
xlsx.cell(2,2)
xlsx.cell(1,1)
xlsx.last_column
xlsx.last_row
xlsx.row(0)
xlsx.for(0)
xlsx.info
xlsx.row.count
xlsx.row(2)
xlsx.row(1)
xlsx.info
xlsx
c
params
xml_contents
c
file_data.respond_to?(:read)
xml_contents
file_data
params
c
cont = File.read(params[:file])
cont = File.read(params[:file].path)
file.respond_to?(:read)
file = params[:file]
Roo::Spreadsheet.open(File.open(params[:file]))
xlsx == Roo::Spreadsheet.open(File.open(params[:file]))
xlsx == Roo:Spreadsheet.open(File.open(params[:file]))
require 'roo'
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:term_point].count
params[:term_point].each do |k,v| p k end
params[:term_point].each do |k,v|
params[:term_point]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
sclass = Sclass.find_by(params[:sclass_id])
sclass
n
c
Sclass.find(params[:sclass_id])
params[:sclass_id]
params[:document][:sclass_id]
sclass
n
params
c
params
c
doc
c
params
c
params
c
current_user.sclasses
current_user
continue
c
n
c
d
c
student.learnings.where(sclass: @sclass).attendance
student.learnings.where(sclass: @sclass)
c
@tests
c
Test.first.destroy
Test.first
current_user.tests
current_user
@tests
continue
params
continue
params
continue
params
params[:test_id]
Test.find(id: params[:test_id])
Test.find(params[:test_id])
params
test
t√©t
continue
current_user.sclasses
current_user
@sclasses
c
params
c
continue
learning.process_point
learning
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
@mini_works
@sclass.mini_works
@sclass = Sclass.find(params[:mini_work][:sclass_id])
@sclass = Sclass.find(params[:mini_work][:sclass_id]
@mini_works
params
continue
MiniWork.all.each do |t|
MiniWork.all.destroy
MiniWork.first
MiniWork.first.sclass
sclass
sclass.mini_works
sclass.miniworks
sclass.mini_works
sclass =Sclass.find(params[:sclass][:id])
params
@mini_works
continue
n
learning.attendance.class
learning.attendance += 1
learning.attendance
learning
params["class_id"]
params
continue
params
params[:sclass_id]
params
n
continue
pr.next
params.key
pr[1]
pr.key
pr
continue
params.each{|pr| p pr}
params
params.each |key, value| do
params.each |k,v|
params.where(value: "attend")
params.values["attend"]
params.values
params.keys
params["attend"]
params

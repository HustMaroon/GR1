c
params[:file].content_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
params[:file].content_type
params[:file]
c
params[:file].content_type
params[:file]
params
c
xlsx.last_row
xlsx
c
params
a
a = a.delete(' ')
a
a.delete(' ')
a = 'adsd  '
student_arr
student_arr.pop
student_arr
student_arr.shift
student_arr.delete!(student_arr.length)
student_arr
student_arr.delete(student_arr.length)
student_arr.last.delete
student_arr.last.destroy
student_arr.last
student_arr = params[:group][:students].split(',')
student_arr = prams[:group][:students].split(',')
params[:group][:students].split(',')[0].delete(' ')
params[:group][:students].split(',')[0].split('-')
params[:group][:students].split(',')[0]
params[:group][:students].split(',')
params[:students]
'asa'.split('s')
params[:students].split(',')
params
c
params
c
@group.add_member(@student)
@group
n
@student
@group
@sclass
c
n
@student
n
@group
n
@sclass
n
c
group.learnings
Group.first.sclass
group.sclass
group
n
group.sclass
group
n
sclass
n
params
param
c
params
c
params
c
current_user
session[:admin_id]
logged_in?
params
c
@sclass.get_sum_process_score_ratio <100
@sclass.get_sum_process_score_ratio
c
@sclass.get_sum_group_score_ratio
@sclass.get_sum_process_score_ratio
@sclass
c
@sclass.topics.count
@sclass.topics
@total_reports
c
get_topic_ratio_sum(sclass)
c
if admin.authenticate('123456') puts '1' end
if admin.authenticate('123456') p 1 end
if admin.authenticate('123456')
admin.authenticate('123456')?
admin.authenticate('123456') == true
admin.authenticate('1234567')
admin.authenticate('123456')
admin
n
c
params
c
request.method
params[:method]
method
params
c
Sclass.first.groups.last.destroy
Sclass.first.groups.last
Sclass.first.groups.count
Sclass.first.groups
Sclass.fisrt.groups
a.length
a
a.first
a << 1
a.first
a = []
groups.length
groups
g
c
g
ng
n
g.students
g
c
groups.first.students
groups.second
groups.first
groups
c
params
c
@groups.count
@groups
c
params
c
Schedule.find(params[:schedule_id])
params
c
params
c
group.add_member(student)
group
student
c
n
student
c
params[:student_name].split('-')[1]
params[:student_name].split('_')[1]
params[:student_name]
params
student
c
Student.find(self.id)
self.id
self.if
self.name_and_id
self
params
c
Sclass.first.class
learning.sclass
learning
learning.term_point
learning.id
learning.class
learning
n
c
params
c
params[:id].class
params[:id]
params
parmad
c
params
c
params[:id]
params
c
xlsx.row(4)
xlsx.row(1)
xlsx.row(0)
xlsx.row[0]
xlsx.first_row
xlsx.last_row
xlsx
params
c
xlsx = Roo::Spreadsheet.open(params[:file])
file = Roo:Spreadsheet.open(params[:file])
params
c
params[:sclass_id]
params[:file]
params
c
learning.get_avg_score
learning
c
learning.get_avg_score
learning
c
params
c
params[:report][:group_id]
params[:group_id]
params[:topic_id]
params[:sclass_id]
params[:sclass]
params[:report]
params
c
value
id
c
params
params["updated_attr"]
params[:updated_attr]
params
c
topic.id.to_s
topic.id
topic
c
topic.send(attr)
attr = "title"
topic = Topic.find(params[:id])
params
c
Sclass.new
self.schedules.build
self.schedules
c
n
self
c
user.update_attributes(name: '123456')
user
continue
t.update_attributes(name: '1324')
t = Teacher.last
Teacher.create(name: '123455', email: '123@123.com', password: '123456', password_confirmation: '123456')
Teacher.create(name: '123455', email: '123@123.com', password: '123456', password_confirmation: '123456'))
Teacher.create(name: '123455', email: '123@123.com')
Teacher.all
Student.first.update_attributes(name: '12346')
t.update_attributes(name: "abcdef")
t.update_attributes(last_reminded: Date.today)

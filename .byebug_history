c
Rails.logger.info(user.errors.messages.inspect)
user.update_attributes(last_reminded: Date.today)
user
c
user.id
user.class
user.update_attributes(last_reminded: Date.today)
user
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
n
c
user
user.get_schedules(Date.tomorrow).count
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
n
c
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
c
user.last_reminded.nil?
user.last_reminded < Date.today
user.last_remind < Date.today
user
c
user
c
user
c
params
c
params
c
params
c
params
c
params
c
Schedule.first.missed_logs.destroy_all
params
c
MissedLog.all
params
c
params
c
params
c
params
c
params
c
params[:old_password]
@student.authenticate('123456')
@student.authenticate('123456'))
@student.authenticate(params[:old_password])
@student
params
c
@student.authenticate(params[:old_password])
@student
params
c
params
c
document.file.url
document.file.erl
document
c
 c
JSON
json_escape
json
@students.class
params
c
params
c
@schedules.count
Teacher.first.sclasses.class
@schedules
c
Schedule.first.date
Schedule.first.date.to_s
params[:date].to_date
params
c
params
c
params
continue
c
cc
c
d
c
d
n
day
c
learning.student.groups
learning.student
learning.sclass
learning
group
c
group
c
group
c
group
c
group
c
group
c
group
c
group
c
group
cgroup
c
group.point
group
c
params[:group][:report]
params[:report]
group
c
group
params
c
params
c
params
c
GroupStudents.first
params
c
xlsx.row(1)
c
class
sclass
n
course
c
params[:group][:students][1].split("-")
params[:group][:students].each do |s| p s end
params[:group][:students]
params[:group][:student].each do |s| p s end
params[:group][:student].first
params[:group][:topic]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:pc].each do |k,v| p k end
params[:pc].each do |pc| p pc end
params[:pc].each do |pc|
params
c
params
c
params
c
params
c
params
c
params
c
params
c
n
get_ratio_sum(sclass)
sclass
n
params
c
sclass
n
sclass
n
c
params[:point_component][:content]
params[:point_component]
params
sclass
sclass.point_components.build(content: params[:point_component][:content])
n
sclass.point_components.build
sclass
n
c
params
c
params
c
6.times do |i| p i end
6.times do |i|
xlsx.row(1).length
xlsx.row(1)[0]
xlsx.first_row
xlsx.cell(1,2)
xlsx.cell(2,2)
xlsx.cell(1,1)
xlsx.last_column
xlsx.last_row
xlsx.row(0)
xlsx.for(0)
xlsx.info
xlsx.row.count
xlsx.row(2)
xlsx.row(1)
xlsx.info
xlsx
c
params
xml_contents
c
file_data.respond_to?(:read)
xml_contents
file_data
params
c
cont = File.read(params[:file])
cont = File.read(params[:file].path)
file.respond_to?(:read)
file = params[:file]
Roo::Spreadsheet.open(File.open(params[:file]))
xlsx == Roo::Spreadsheet.open(File.open(params[:file]))
xlsx == Roo:Spreadsheet.open(File.open(params[:file]))
require 'roo'
params
c
params
c
params
c

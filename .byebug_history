c
if admin.authenticate('123456') puts '1' end
if admin.authenticate('123456') p 1 end
if admin.authenticate('123456')
admin.authenticate('123456')?
admin.authenticate('123456') == true
admin.authenticate('1234567')
admin.authenticate('123456')
admin
n
c
params
c
request.method
params[:method]
method
params
c
Sclass.first.groups.last.destroy
Sclass.first.groups.last
Sclass.first.groups.count
Sclass.first.groups
Sclass.fisrt.groups
a.length
a
a.first
a << 1
a.first
a = []
groups.length
groups
g
c
g
ng
n
g.students
g
c
groups.first.students
groups.second
groups.first
groups
c
params
c
@groups.count
@groups
c
params
c
Schedule.find(params[:schedule_id])
params
c
params
c
group.add_member(student)
group
student
c
n
student
c
params[:student_name].split('-')[1]
params[:student_name].split('_')[1]
params[:student_name]
params
student
c
Student.find(self.id)
self.id
self.if
self.name_and_id
self
params
c
Sclass.first.class
learning.sclass
learning
learning.term_point
learning.id
learning.class
learning
n
c
params
c
params[:id].class
params[:id]
params
parmad
c
params
c
params[:id]
params
c
xlsx.row(4)
xlsx.row(1)
xlsx.row(0)
xlsx.row[0]
xlsx.first_row
xlsx.last_row
xlsx
params
c
xlsx = Roo::Spreadsheet.open(params[:file])
file = Roo:Spreadsheet.open(params[:file])
params
c
params[:sclass_id]
params[:file]
params
c
learning.get_avg_score
learning
c
learning.get_avg_score
learning
c
params
c
params[:report][:group_id]
params[:group_id]
params[:topic_id]
params[:sclass_id]
params[:sclass]
params[:report]
params
c
value
id
c
params
params["updated_attr"]
params[:updated_attr]
params
c
topic.id.to_s
topic.id
topic
c
topic.send(attr)
attr = "title"
topic = Topic.find(params[:id])
params
c
Sclass.new
self.schedules.build
self.schedules
c
n
self
c
user.update_attributes(name: '123456')
user
continue
t.update_attributes(name: '1324')
t = Teacher.last
Teacher.create(name: '123455', email: '123@123.com', password: '123456', password_confirmation: '123456')
Teacher.create(name: '123455', email: '123@123.com', password: '123456', password_confirmation: '123456'))
Teacher.create(name: '123455', email: '123@123.com')
Teacher.all
Student.first.update_attributes(name: '12346')
t.update_attributes(name: "abcdef")
t.update_attributes(last_reminded: Date.today)
t =Teacher.first
user.save
user.last_reminded = nil
user.reload
user.save
user.last_reminded = nil
user.last_reminded.class
user.save
user.last_reminded=Date.today
user.last_reminded
user
c
user.update_attributes(last_reminded: Date.today)
user
c
user.update_attributes(last_reminded: Date.now)
user
c
user
n
c
user.save
user.last_reminded = Date.today
user.authenticate('12345678')
user.password
Rails.logger.info(user.errors.messages.inspect)
user.update_attributes(last_reminded: Date.today)
user.update_attributes(last_updated: Date.today)
Rails.logger.info(user.errors.messages.inspect)
c
Rails.logger.info(user.errors.messages.inspect)
user.update_attributes(last_reminded: Date.today)
user
c
user.id
user.class
user.update_attributes(last_reminded: Date.today)
user
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
n
c
user
user.get_schedules(Date.tomorrow).count
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
n
c
user.get_schedules(Date.tomorrow).count >0 && (user.last_reminded.nil? || user.last_reminded < Date.today)
c
user.last_reminded.nil?
user.last_reminded < Date.today
user.last_remind < Date.today
user
c
user
c
user
c
params
c
params
c
params
c
params
c
params
c
Schedule.first.missed_logs.destroy_all
params
c
MissedLog.all
params
c
params
c
params
c
params
c
params
c
params[:old_password]
@student.authenticate('123456')
@student.authenticate('123456'))
@student.authenticate(params[:old_password])
@student
params
c
@student.authenticate(params[:old_password])
@student
